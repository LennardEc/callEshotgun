reticulate::repl_python()
devtools::load_all(".")
reticulate::repl_python()
reticulate::source_python('~/R/CallEshotgun/CopyOfeshotgun/nsga2_pareto_front.py')
reticulate::repl_python()
Xtr <- matrix(runif(20),ncol=1)
Ytr <- sphere(Xtr)
lb <- c(-5.12)
ub <- c(5.12)
View(Xtr)
View(Ytr)
reticulate::repl_python()
lb <- c(c(-5.12))
ub <- c(c(5.12))
print(np$array(matrix(c(-5.2))))
np <- import("numpy", convert = FALSE)
print(np$array(matrix(c(-5.2))))
print(np$array(matrix(-5.2)))
print(np$array(c(-5.12)))
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
np <- import("numpy", convert = FALSE)
print(np$array(c(-5.2, 0.9)))
np <- import("numpy", convert = FALSE)
print(np$array(c(-5.2, 0.9)))
print(np$array(c(-5.2)))
np <- import("numpy", convert = FALSE)
print(np$array(c(-5.2, 0.9)))
print(np$array(matrix(c(-5.2))))
np <- import("numpy", convert = FALSE)
print(np$array(c(-5.2, 0.9)))
print(np$array(c(-5.2)))
reticulate::repl_python()
np <- import("numpy", convert = FALSE)
print(np$array(c(-5.2, 0.9)))
print(np$array(matrix(-5.12, 1,1)))
np <- import("numpy", convert = FALSE)
print(np$array(c(-5.2, 0.9)))
print(np$array(matrix(-5.12, 1,0)))
np <- import("numpy", convert = FALSE)
print(np$array(c(-5.2, 0.9)))
print(np$array(matrix(-5.12, 0,1)))
np <- import("numpy", convert = FALSE)
print(np$array(c(-5.2, 0.9)))
print(np$array(matrix(c(-5.12), 0,1)))
np <- import("numpy", convert = FALSE)
print(np$array(c(-5.2, 0.9)))
print(np$array(matrix(c(-5.12), 1,1)))
np <- import("numpy", convert = FALSE)
print(np$array(c(-5.2, 0.9)))
print(np$array(matrix(c(-5.12), 1,0)))
np <- import("numpy", convert = FALSE)
print(np$array(c(-5.2, 0.9)))
print(np$array(matrix(c(-5.12))))
np <- import("numpy", convert = FALSE)
print(np$array(c(-5.2, 0.9)))
print(np$array(matrix(c(-5.12))[0]))
np <- import("numpy", convert = FALSE)
print(np$array(c(-5.2, 0.9)))
print(np$array(matrix(c(-5.12))[1]))
np <- import("numpy", convert = FALSE)
print(np$array(c(-5.2, 0.9)))
print(np$array(matrix(c(-5.12,0))[1]))
py_run_file("~/R/eshotgun/AufrufScript.py")
np <- import("numpy", convert = FALSE)
print(np$array(c(-5.2, 0.9)))
print(np$array(matrix(c(-5.12))[1]))
print(callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12,0), 10, 0.2))
callEshotgun <- function(Xtr, Ytr, f_lb, f_ub, q, epsilon) {
py_run_file("~/R/eshotgun/AufrufScript.py")
np <- import("numpy", convert = FALSE)
Xnew <- tryCatch({
py$callShotgun(np$array(Xtr), np$array(Ytr), np$array(f_lb), np$array(f_ub), q, epsilon)
}, warning = function(w) {
}, error = function(e) {
}, finally = {
})
}
print(callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12,0), 10, 0.2))
y <- c(1)
y <- c(1)
print(nrow(y))
y <- c(1)
print(length(y))
y <- c(1,12,14)
print(length(y))
y <- c(1,12,14)
print(length(1))
Xtr <- matrix(runif(20),ncol=3)
Ytr <- sphere(Xtr)
View(Xtr)
View(Ytr)
Ytr <- sphere(Xtr)
View(Ytr)
Xtr <- matrix(runif(20),ncol=3)
View(Xtr)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
View(Xtr)
View(Ytr)
errorMsg <- "Dimension of Lower bound: " + dimLb
dimLb <- length(f_lb)
errorMsg <- "Dimension of Lower bound: " + 10
errorMsg <- paste("Dimension of Lower bound: ", dimLb, sep="")
sphere <- function (x) {
matrix(apply(x, # matrix
1, # margin (apply over rows)
function(x) {
sum(x ^ 2)  # objective function
}),
, 1) # number of columns
}
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
print(callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1))
print(callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0,1), 10L, 0.1))
Xtr <- matrix(runif(20),ncol=1)
Ytr <- sphere(Xtr)
print(callEshotgun(Xtr, Ytr, c(-5.12), c(5.12), 10L, 0.2))
reticulate::repl_python()
x <- c(3)
x <- matrix(x, ncol=1)
View(x)
x <- c(3)
x <- matrix(x, ncol=1)
print(x)
Xtr <- matrix(runif(20),ncol=1)
Ytr <- sphere(Xtr)
callEshotgun <- function(Xtr, Ytr, f_lb, f_ub, q, epsilon) {
py_run_file("~/R/eshotgun/AufrufScript.py")
np <- import("numpy", convert = FALSE)
Xnew <- tryCatch({
#is.null(dim(x))
#x <- matrix(x, ncol=1)
xrow <- nrow(Xtr)
xcol <- ncol(Xtr)
yrow <- nrow(Ytr)
ycol <- ncol(Ytr)
dimLb <- length(f_lb)
dimUb <- length(f_ub)
# check for equal dimensions for Xtr and Ytr
if(xrow != yrow) {
stop("Xtr and Ytr have different Shapes")
}
#check lower and upper bound for a fitting dimension
if(!(dimLb == dimUb && dimLb == xcol)) {
if(dimLb != dimUb) {
errorMsg <- c("Dimension of bounds don't match!",
paste("Dimension of Lower bound: ", dimLb, sep=""),
paste("Dimension of Upper bound: ", dimUb, sep=""))
cat(errorMsg, sep="\n")
}else {
errorMsg <- c("Dimension of bounds and Xtr don't match!",
paste("Dimension of Lower bound: ", dimLb, sep=""),
paste("Dimension of Xtr: ", xcol, sep=""))
cat(errorMsg, sep="\n")
}
stop()
}
#Notwendig? eshotgun wirft keinen Fehler
#check epsilon between 0.0 and 1.0
if(!(epsilon >= 0.0 && epsilon <= 1.0)) {
cat("Epsilon has to be between 0.0 and 1.0")
stop()
}
# if the column is 1 choose special case
if(xcol >= 2) {
py$callShotgun(np$array(Xtr), np$array(Ytr), np$array(f_lb), np$array(f_ub), q, epsilon)
}else {
x <- matrix(f_lb, ncol=1)
y <- matrix(f_ub, ncol=1)
py$callShotgun(np$array(Xtr), np$array(Ytr), np$array(x), np$array(y), q, epsilon)
}
}, warning = function(w) {
}, error = function(e) {
print("error")
}, finally = {
})
return(Xnew)
}
Xtr <- matrix(runif(20),ncol=1)
Ytr <- sphere(Xtr)
print(callEshotgun(Xtr, Ytr, c(-5.12), c(5.12), 10L, 0.2))
reticulate::repl_python()
