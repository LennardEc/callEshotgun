callEshotgun(Xtr, Ytr, c(0,1), c(2,1), 10L, 0.1)
, NULL
)
#value of lower bound is bigger than the value of the upper bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,3), c(2,2), 10L, 0.1)
, NULL
)
#value of upper bound is lower than the value of the lower bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,0), c(2,-1), 10L, 0.1)
, NULL
)
#value of upper bound is lower than the value of the lower bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,0), c(-3,-1), 10L, 0.1)
, NULL
)
Xtr <- matrix(runif(20),ncol=3)
Ytr <- sphere(Xtr)
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(5,0,200), c(10,10,210), 10L, 0.1)
, typeof(Xtr)
)
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(5,0,200), c(10,10,190), 10L, 0.1)
, NULL
)
use_virtualenv("r-reticulate")
py_available()
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-4,-5), c(-3,1), 10L, 0.1)
, typeof(Xtr)
)
#wrong dimension
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0, 1), 10L, 0.1)
, NULL
)
#wrong dimension
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1, 0), c(5.12, 0, 1), 10L, 0.1)
, NULL
)
#values are not strictly smaller
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(1,1), c(1,1), 10L, 0.1)
, NULL
)
#values are not strictly smaller
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,1), c(2,1), 10L, 0.1)
, NULL
)
#value of lower bound is bigger than the value of the upper bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,3), c(2,2), 10L, 0.1)
, NULL
)
#value of upper bound is lower than the value of the lower bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,0), c(2,-1), 10L, 0.1)
, NULL
)
#value of upper bound is lower than the value of the lower bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,0), c(-3,-1), 10L, 0.1)
, NULL
)
Xtr <- matrix(runif(20),ncol=3)
Ytr <- sphere(Xtr)
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(5,0,200), c(10,10,210), 10L, 0.1)
, typeof(Xtr)
)
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(5,0,200), c(10,10,190), 10L, 0.1)
, NULL
)
install_miniconda()
use_virtualenv("r-minidonda")
py_available()
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-4,-5), c(-3,1), 10L, 0.1)
, typeof(Xtr)
)
#wrong dimension
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0, 1), 10L, 0.1)
, NULL
)
#wrong dimension
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1, 0), c(5.12, 0, 1), 10L, 0.1)
, NULL
)
#values are not strictly smaller
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(1,1), c(1,1), 10L, 0.1)
, NULL
)
#values are not strictly smaller
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,1), c(2,1), 10L, 0.1)
, NULL
)
#value of lower bound is bigger than the value of the upper bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,3), c(2,2), 10L, 0.1)
, NULL
)
#value of upper bound is lower than the value of the lower bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,0), c(2,-1), 10L, 0.1)
, NULL
)
#value of upper bound is lower than the value of the lower bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,0), c(-3,-1), 10L, 0.1)
, NULL
)
Xtr <- matrix(runif(20),ncol=3)
Ytr <- sphere(Xtr)
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(5,0,200), c(10,10,210), 10L, 0.1)
, typeof(Xtr)
)
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(5,0,200), c(10,10,190), 10L, 0.1)
, NULL
)
checkLibraries()
python_available()
py_available()
library(reticulate)
py_available()
virtualenv_exists(envname = NULL)
CallEshotgun::checkLibraries()
conda_create('C:/Users/Lennard/AppData/Local/r-miniconda/envs/r-reticulate')
CallEshotgun::checkLibraries()
CallEshotgun::checkLibraries()
CallEshotgun::checkLibraries()
library(CallEshotgun)
CallEshotgun::checkLibraries()
py_install("GPy")
py_install("GPy==1.9.9")
py_install("GPy==1.9.9", pip = TRUE)
py_install("GPy-1.9.9", pip = TRUE)
py_install("GPy==1.9.9", pip = TRUE)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
library(CallEshotgun)
CallEshotgun::checkLibraries()
py_config()
library(CallEshotgun)
py_install("GPy==1.9.9")
py_install("GPy")
pip install --upgrade GPy
reticulate::py_install("pygmo",method = method, conda = conda)
conda = "auto"
reticulate::py_install("pygmo",method = method, conda = conda)
method = "auto"
reticulate::py_install("pygmo",method = method, conda = conda)
reticulate::py_install("scipy", method = method, conda = conda, pip=TRUE)
reticulate::py_install("cma", method = method, conda = conda, pip=TRUE)
reticulate::py_install("nlopt", method = method, conda = conda, pip=TRUE)
reticulate::py_install("pyDOE2", method = method, conda = conda, pip=TRUE)
reticulate::py_install("numpy-stl", method = method, conda = conda, pip=TRUE)
reticulate::py_install("matplotlib", method = method, conda = conda, pip=TRUE)
source('C:/Users/Lennard/IDE/praxisprojekt/rshotgunsmall/R/CallEshotgun.R', encoding = 'UTF-8')
source('C:/Users/Lennard/IDE/praxisprojekt/rshotgunsmall/R/testFunctions.R')
source('C:/Users/Lennard/IDE/praxisprojekt/rshotgunsmall/R/optimizer.R')
runSampleOpt(sphere)
runSampleOpt(sphere)
library(reticulate)
runSampleOpt(sphere)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-4,-5), c(-3,1), 10L, 0.1)
, typeof(Xtr)
)
#wrong dimension
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0, 1), 10L, 0.1)
, NULL
)
#wrong dimension
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1, 0), c(5.12, 0, 1), 10L, 0.1)
, NULL
)
#values are not strictly smaller
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(1,1), c(1,1), 10L, 0.1)
, NULL
)
#values are not strictly smaller
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,1), c(2,1), 10L, 0.1)
, NULL
)
#value of lower bound is bigger than the value of the upper bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,3), c(2,2), 10L, 0.1)
, NULL
)
#value of upper bound is lower than the value of the lower bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,0), c(2,-1), 10L, 0.1)
, NULL
)
#value of upper bound is lower than the value of the lower bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,0), c(-3,-1), 10L, 0.1)
, NULL
)
Xtr <- matrix(runif(20),ncol=3)
Ytr <- sphere(Xtr)
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(5,0,200), c(10,10,210), 10L, 0.1)
, typeof(Xtr)
)
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(5,0,200), c(10,10,190), 10L, 0.1)
, NULL
)
library(CallEshotgun)
method = "auto"
conda = "auto"
reticulate::py_install("GPy", method = method, conda = conda, pip=TRUE)
library(CallEshotgun)
reticulate::py_install("GPy", method = method, conda = conda, pip=TRUE)
reticulate::py_install("GPy==1.9.9", method = method, conda = conda, pip=TRUE)
CallEshotgun::checkLibraries()
Xtr <- matrix(runif(20),ncol=2)
Ytr <- modifiedBranin(Xtr)
if (reticulate::virtualenv_exists())
skip("missing python environment")
if(checkForPackages)
skip("Packages Missing")
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 2.1)
, NULL
)
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 1.1)
, NULL
)
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, -2.1)
, NULL
)
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, -1.1)
, NULL
)
Xtr <- matrix(runif(20),ncol=3)
Ytr <- modifiedBranin(Xtr)
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5,-4,-3), c(5,6,7), 10L, 0.0),
typeof(Xtr)
)
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5,-4,-3), c(5,6,7), 10L, 1.0),
typeof(Xtr)
)
Xtr <- matrix(runif(20),ncol=3)
Ytr <- modifiedBranin(Xtr)
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5,-4,-3), c(5,6,7), 10L, 2.0),
NULL
)
library(CallEshotgun)
devtools::document()
library(CallEshotgun)
library(CallEshotgun)
library(CallEshotgun)
library(CallEshotgun)
CallEshotgun::checkLibraries()
CallEshotgun::checkLibraries()
checkLibraries()
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
# equal rows
testthat::equals(
nrow(Xtr), nrow(Ytr)
)
if (!reticulate::virtualenv_exists())
skip("missing python environment")
if(checkForPackages()) {
skip("Packages Missing")
}
#' Check that all Python imports exist
#'
#' @return b True or False
#'
#' @examples
checkForPackages <- function() {
return(
reticulate::py_module_available("numpy") &
reticulate::py_module_available("GPy==1.9.9") &
reticulate::py_module_available("pygmo") &
reticulate::py_module_available("scipy") &
reticulate::py_module_available("cma") &
reticulate::py_module_available("nplot") &
reticulate::py_module_available("pyDOE2") &
reticulate::py_module_available("numpy-stl") &
reticulate::py_module_available("matplotlib")
)
}
if(checkForPackages()) {
skip("Packages Missing")
}
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
return(
reticulate::py_module_available("numpy") &
reticulate::py_module_available("GPy==1.9.9") &
reticulate::py_module_available("pygmo") &
reticulate::py_module_available("scipy") &
reticulate::py_module_available("cma") &
reticulate::py_module_available("nplot") &
reticulate::py_module_available("pyDOE2") &
reticulate::py_module_available("numpy-stl") &
reticulate::py_module_available("matplotlib")
)
reticulate::py_module_available("GPy==1.9.9")
reticulate::py_module_available("GPy")
py_install("GPy")
use_python_version()
use_python_version("3.6")
py_install("GPy==1.9.9", pip=TRUE)
py_install("GPy", pip=TRUE)
py_module_available("GPy")
py_module_available("numpy")
checkForPackages()
py_version()
Xtr <- matrix(runif(20),ncol=2)
Ytr <- modifiedBranin(Xtr)
# equal rows
testthat::equals(
nrow(Xtr), nrow(Ytr)
)
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 2.1)
, NULL
)
library(CallEshotgun)
library(CallEshotgun)
py_config
py_config()
library(reticulate)
py_config()
py_discover_config()
install_python("3.6")
install_python("3.8.7")
use_python_version("3.8.7")
py_config()
use_python("3.8.7")
py_config()
py_discover_config()
use_python("3.8.7", required = TRUE)
RETICULATE_PYTHON
RETICULATE_PYTHON
library(CallEshotgun)
devtools::document()
source('C:/Users/Lennard/IDE/praxisprojekt/rshotgunsmall/R/testFunctions.R')
source('C:/Users/Lennard/IDE/praxisprojekt/rshotgunsmall/R/CallEshotgun.R', encoding = 'UTF-8')
devtools::document()
checkLibraries()
create_conda()
library(reticulate)
reticulate::conda_create()
checkLibraries()
checkForPackages()
reticulate::py_module_available("GPy")
reticulate::py_module_available("numpy")
reticulate::py_module_available("pygmo")
reticulate::py_module_available("scipy")
reticulate::py_module_available("cma")
reticulate::py_module_available("cma")
return(
reticulate::py_module_available("numpy") &
reticulate::py_module_available("GPy") &
reticulate::py_module_available("pygmo") &
reticulate::py_module_available("scipy") &
reticulate::py_module_available("cma") &
reticulate::py_module_available("nplot") &
reticulate::py_module_available("pyDOE2") &
reticulate::py_module_available("numpy-stl") &
reticulate::py_module_available("matplotlib")
)
reticulate::py_module_available("nplot")
reticulate::py_module_available("pyDOE2")
reticulate::py_module_available("numpy-stl"
)
reticulate::py_module_available("matplotlib")
reticulate::py_install("nlopt", method = method, conda = conda, pip=TRUE)
reticulate::py_install("pyDOE2", method = method, conda = conda, pip=TRUE)
reticulate::py_install("numpy-stl", method = method, conda = conda, pip=TRUE)
reticulate::py_install("matplotlib", method = method, conda = conda, pip=TRUE)
if(!checkForPackages()) {
skip("Packages Missing")
}
checkForPackages <- function() {
return(
reticulate::py_module_available("numpy") &
reticulate::py_module_available("GPy") &
reticulate::py_module_available("pygmo") &
reticulate::py_module_available("scipy") &
reticulate::py_module_available("cma") &
reticulate::py_module_available("nplot") &
reticulate::py_module_available("pyDOE2") &
reticulate::py_module_available("numpy-stl") &
reticulate::py_module_available("matplotlib")
)
}
checkForPackages()
checkLibraries(conda="r-reticulate")
checkLibraries()
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
testthat::equals(
nrow(Xtr), nrow(Ytr)
)
if (!reticulate::virtualenv_exists())
skip("missing python environment")
if(!checkForPackages()) {
skip("Packages Missing")
}
if(!checkForPackages()) {
skip("Packages Missing")
}
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-4,-5), c(-3,1), 10L, 0.1)
, typeof(Xtr)
)
callEshotgun(Xtr, Ytr, c(-5,-4,-3), c(5,6,7), 10L, 1.0)
callEshotgun(Xtr, Ytr, c(-5,-4), c(5,6,), 10L, 1.0)
callEshotgun(Xtr, Ytr, c(-5,-4), c(5,6), 10L, 1.0)
callEshotgun(Xtr, Ytr, c(-5,-4), c(5,6), 10L, 1.0, pf=TRUE)
callEshotgunV2(Xtr, Ytr, c(-5,-4), c(5,6), 10L, 1.0)
callEshotgunV2(Xtr, Ytr, c(-5,-4), c(5,6), 10L, 1.0, pf=TRUE)
callEshotgunV2(Xtr, Ytr, c(-5,-4), c(5,6), 10L, 1.0, pf=TRUE)
callEshotgunV2(Xtr, Ytr, c(-5,-4), c(5,6), 10L, 1.0)
callEshotgunV2(Xtr, Ytr, c(-100000,-100000), c(100000,100000), 10L, 1.0)
callEshotgunV2(Xtr, Ytr, c(-1,-1), c(1,1), 10L, 1.0)
