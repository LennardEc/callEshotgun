library(CallEshotgun)
newX <-callEshotgun(Xtr, Ytr, c(-5.12), c(5.12), 10L, 0.2)
testthat::expect_equal(
nrow(newX), nrow(Xtr)
)
Xtr <- matrix(runif(20),ncol=1)
Ytr <- sphere(Xtr)
#working
newX <-callEshotgun(Xtr, Ytr, c(-5.12), c(5.12), 10L, 0.2)
testthat::expect_equal(
nrow(newX), nrow(Xtr)
)
Xtr <- matrix(runif(20),ncol=1)
Ytr <- sphere(Xtr)
newX <-callEshotgun(Xtr, Ytr, c(-5.12), c(5.12), 10L, 0.2)
Xtr <- matrix(runif(20),ncol=1)
Ytr <- sphere(Xtr)
#working
newX <-callEshotgun(Xtr, Ytr, c(-5.12), c(5.12), 10L, 0.2)
testthat::expect_equal(
ncol(newX), ncol(Xtr)
)
Xtr <- matrix(runif(20),ncol=1)
Ytr <- sphere(Xtr)
#working
newX <-callEshotgun(Xtr, Ytr, c(-5.12), c(5.12), 10L, 0.2)
testthat::expect_equal(
ncol(newX), ncol(Xtr)
)
#10 points get evaluaded
testthat::expect_equal(
nrow(newX), nrow(Xtr) + 10
)
Xtr <- matrix(runif(20),ncol=1)
Ytr <- sphere(Xtr)
#working
newX <-callEshotgun(Xtr, Ytr, c(-5.12), c(5.12), 10L, 0.2)
testthat::expect_equal(
ncol(newX), ncol(Xtr)
)
#10 points get evaluaded
testthat::expect_equal(
nrow(newX)+ 10 , nrow(Xtr)
)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- modifiedLevy(Xtr)
#working
newX <- callEshotgun(Xtr, Ytr, c(-5,-1), c(5,1), 20L, 0.1)
testthat::expect_equal(
nrow(newX),
nrow(Xtr)
)
#working
testthat::expect_equal(
ncol(newX),
ncol(Xtr)
)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- modifiedLevy(Xtr)
newX <- callEshotgun(Xtr, Ytr, c(-5,-1), c(5,1), 20L, 0.1)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- modifiedLevy(Xtr)
Xtr <- matrix(runif(20),ncol=1)
Ytr <- sphere(Xtr)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- modifiedLevy(Xtr)
#working
newX <- callEshotgun(Xtr, Ytr, c(-5,-1), c(5,1), 10L, 0.1)
testthat::expect_equal(
nrow(newX),
nrow(Xtr)
)
#working
testthat::expect_equal(
ncol(newX),
ncol(Xtr)
)
# Edit the Ytr-Matrix to provoke a error
Xtr <- matrix(runif(20),ncol=1)
Ytr <- modifiedLevy(Xtr)[1:8]
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5), c(5), 10L, 0.1),
NULL
)
# Edit the Ytr and Xtr-Matrix to recover the error
testthat::expect_equal(
callEshotgun(Xtr[1:8], Ytr, c(-5), c(5), 10L, 0.1),
NULL
)
Xtr[1:8]
# Edit the Ytr-Matrix to provoke a error
Xtr <- matrix(runif(20),ncol=1)
Ytr <- modifiedLevy(Xtr)[1:8]
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5), c(5), 10L, 0.1),
NULL
)
Xtr <- Xtr[1:8]
# Edit the Ytr and Xtr-Matrix to recover the error
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5), c(5), 10L, 0.1),
NULL
)
# Edit the Ytr-Matrix to provoke a error
Xtr <- matrix(runif(20),ncol=1)
Ytr <- modifiedLevy(Xtr)[1:8]
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5), c(5), 10L, 0.1),
NULL
)
Xtr <- Xtr[1:8]
# Edit the Ytr and Xtr-Matrix to recover the error
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5), c(5), 10L, 0.1),
NULL
)
callEshotgun(Xtr, Ytr, c(-5), c(5), 10L, 0.1)
Xtr <- Xtr[1:8]
Ytr <- Ytr[1:8]
# Edit the Ytr and Xtr-Matrix to recover the error
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5), c(5), 10L, 0.1),
NULL
)
Xtr <- matrix(runif(20),ncol=1)
Ytr <- modifiedLevy(Xtr)[1:15]
Xtr <- Xtr[1:10]
Ytr <- Ytr[1:10]
Xtr <- matrix(runif(20),ncol=1)
Ytr <- modifiedLevy(Xtr)[1:15]
Xtr <- Xtr[1:10]
Ytr <- Ytr[1:10]
# Edit the Ytr and Xtr-Matrix to recover the error
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5), c(5), 10L, 0.1),
NULL
)
Xtr <- Xtr[1:10]
Xtr[1:10]
Ytr[1:10]
matrix(runif(20),ncol=1)
Xtr <- matrix(runif(20),ncol=1)
Ytr <- modifiedLevy(Xtr)[1:15]
Xtr <- Xtr[1:10]
Ytr <- Ytr[1:10]
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5), c(5), 10L, 0.1),
NULL
)
Xtr <- matrix(runif(20),ncol=1)
Ytr <- modifiedLevy(Xtr)[1:15]
# Edit the Ytr and Xtr-Matrix to recover the error
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5), c(5), 10L, 0.1),
NULL
)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- modifiedBranin(Xtr)
#working
newX <- callEshotgun(Xtr, Ytr, c(-5,-1), c(5,1), 10L, 0.1)
testthat::expect_equal(
nrow(newX),
nrow(Xtr)
)
#working
testthat::expect_equal(
ncol(newX),
ncol(Xtr)
)
Xtr <- matrix(runif(20),ncol=3)
Ytr <- modifiedBranin(Xtr)
newX <- callEshotgun(Xtr, Ytr, c(-5,-4,-3), c(5,6,7), 10L, 0.1)
testthat::expect_equal(
nrow(newX),
nrow(Xtr)
)
#working
testthat::expect_equal(
ncol(newX),
ncol(Xtr)
)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- modifiedBranin(Xtr)
#working
newX <- callEshotgun(Xtr, Ytr, c(-5,-1), c(5,1), 10L, 0.1)
testthat::expect_equal(
nrow(newX),
nrow(Xtr)
)
#working
testthat::expect_equal(
ncol(newX),
ncol(Xtr)
)
Xtr <- matrix(runif(20),ncol=3)
Ytr <- modifiedBranin(Xtr)
newX <- callEshotgun(Xtr, Ytr, c(-5,-4,-3), c(5,6,7), 10L, 0.1)
testthat::expect_equal(
nrow(newX),
nrow(Xtr)
)
Xtr <- matrix(runif(20),ncol=3)
Ytr <- modifiedBranin(Xtr)
newX <- callEshotgun(Xtr, Ytr, c(-5,-4,-3), c(5,6,7), 10L, 0.1)
Xtr <- matrix(runif(20),ncol=3)
Ytr <- modifiedBranin(Xtr)
newX <- callEshotgun(Xtr, Ytr, c(-5,-4,-3), c(5,6,7), 10L, 0.1)
#working
testthat::expect_equal(
ncol(newX),
ncol(Xtr)
)
library(CallEshotgun)
citation("reticulate")
citation("testthat")
citation("roxygen2")
roxygenise()
devtools::document()
devtools::document()
use_mit_license("Lennard Reese")
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
use_mit_license("Lennard Reese")
usethis::use_mit_license("Lennard Reese")
library(usethis)
use_mit_license("Lennard Reese")
usethis::use_mit_license("Lennard Reese")
update.packages("rlang")
usethis::use_mit_license("Lennard Reese")
library(rlang)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(CallEshotgun)
install.packages("rlang")
usethis::use_mit_license("Lennard Reese")
library(CallEshotgun)
runSampleOpt <- function(fn, budget = 100){
initBudget <- budget
Xtr <- matrix(runif(20),ncol=2)
Ytr <- fn(Xtr)
budget <- initBudget - nrow(Xtr)
while(budget > 0){
newX <- callEshotgun(Xtr, Ytr, c(-5,-5), c(5,5))
print("initial worked")
print(newX)
newY <- fn(newX)
Xtr <- rbind(Xtr, newX)
print(Xtr)
Ytr <- c(Ytr, newY)
print(Ytr)
budget <- initBudget - nrow(Xtr)
}
}
runSampleOpt(sphere)
runSampleOpt <- function(fn, budget = 100){
initBudget <- budget
Xtr <- matrix(runif(20),ncol=2)
Ytr <- fn(Xtr)
budget <- initBudget - nrow(Xtr)
while(budget > 0){
newX <- callEshotgun(Xtr, Ytr, c(-5,-5), c(5,5))
print("initial worked")
print(newX)
newY <- fn(newX)
Xtr <- rbind(Xtr, newX)
print(Xtr)
Ytr <- rbind(Ytr, newY)
print(Ytr)
budget <- initBudget - nrow(Xtr)
}
}
runSampleOpt(sphere)
print(2.168292e-07)
runSampleOpt(modifiedEgg)
runSampleOpt(modifiedEgg)
runSampleOpt(sphere)
runSampleOpt(sphere)
runSampleOpt(modifiedBranin)
runSampleOpt(modifiedBranin)
#runSampleOpt(sphere)
#runSampleOpt(modifiedBranin)
#runsampleOpt(modifiedEgg)
runSampleOpt(modifiedLevy())
#runSampleOpt(sphere)
#runSampleOpt(modifiedBranin)
#runsampleOpt(modifiedEgg)
runSampleOpt(modifiedLevy
#runSampleOpt(sphere)
#runSampleOpt(modifiedBranin)
#runsampleOpt(modifiedEgg)
runSampleOpt(modifiedLevy)
#runSampleOpt(sphere)
#runSampleOpt(modifiedBranin)
#runsampleOpt(modifiedEgg)
runSampleOpt(modifiedLevy)
#runSampleOpt(sphere)
#runSampleOpt(modifiedBranin)
#runsampleOpt(modifiedEgg)
#runSampleOpt(modifiedLevy)
runSampleOpt(modifiedschwef)
#runSampleOpt(sphere)
#runSampleOpt(modifiedBranin)
#runsampleOpt(modifiedEgg)
#runSampleOpt(modifiedLevy)
runSampleOpt(modifiedschwef)
#runSampleOpt(sphere)
#runSampleOpt(modifiedBranin)
#runsampleOpt(modifiedEgg)
#runSampleOpt(modifiedLevy)
runSampleOpt(modifiedschwef)
runSampleOpt <- function(fn, budget = 100){
initBudget <- budget
Xtr <- matrix(runif(20),ncol=2)
Ytr <- fn(Xtr)
budget <- initBudget - nrow(Xtr)
while(budget > 0){
newX <- callEshotgun(Xtr, Ytr, c(-5,-5), c(5,5))
newY <- fn(newX)
Xtr <- rbind(Xtr, newX)
Ytr <- rbind(Ytr, newY)
budget <- initBudget - nrow(Xtr)
}
print(Xtr)
print(Ytr)
}
runSampleOpt(modifiedschwef)
# Edit the Ytr-Matrix to provoke a error
Xtr <- matrix(runif(20),ncol=1)
Ytr <- modifiedLevy(Xtr)[1:15]
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5), c(5), 10L, 0.1),
NULL
)
Xtr <- matrix(runif(20),ncol=1)[1:15]
Ytr <- modifiedLevy(Xtr)
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5), c(5), 10L, 0.1),
NULL
)
# Edit the Ytr-Matrix to provoke a error
Xtr <- matrix(runif(20),ncol=1)
Ytr <- modifiedLevy(Xtr)[1:15]
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5), c(5), 10L, 0.1),
NULL
)
# Edit the Ytr-Matrix to provoke a error
Xtr <- matrix(runif(20),ncol=1)[1:15]
Ytr <- modifiedLevy(Xtr)[1:15]
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5), c(5), 15L, 0.1),
NULL
)
# Edit the Ytr-Matrix to provoke a error
Xtr <- matrix(runif(20),ncol=1)
Ytr <- modifiedLevy(Xtr)
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5), c(5), 25L, 0.1),
NULL
)
print(callEshotgun(Xtr, Ytr, c(-5), c(5), 25L, 0.1))
Xtr <- matrix(runif(20),ncol=1)
Ytr <- sphere(Xtr)
#working
newX <-callEshotgun(Xtr, Ytr, c(-5.12), c(5.12), 10L, 0.2)
testthat::expect_equal(
ncol(newX), ncol(Xtr)
)
Xtr <- matrix(runif(20),ncol=1)
Ytr <- sphere(Xtr)
newX <-callEshotgun(Xtr, Ytr, c(-5.12), c(5.12), 10L, 0.2)
testthat::expect_equal(
ncol(newX), ncol(Xtr)
)
Xtr <- matrix(runif(20),ncol=1)
Ytr <- sphere(Xtr)
#working
newX <-callEshotgun(Xtr, Ytr, c(-5.12), c(5.12), 20L, 0.2)
testthat::expect_equal(
ncol(newX), ncol(Xtr)
)
#10 points get evaluaded
testthat::expect_equal(
nrow(newX) + 10 , nrow(Xtr)
)
Xtr <- matrix(runif(20),ncol=1)
Ytr <- sphere(Xtr)
#working
newX <-callEshotgun(Xtr, Ytr, c(-5.12), c(5.12), 20L, 0.2)
testthat::expect_equal(
ncol(newX), ncol(Xtr)
)
#10 points get evaluaded
testthat::expect_equal(
nrow(newX), nrow(Xtr)
)
#working
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
#working
newX <- callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1)
testthat::expect_equal(
nrow(newX), nrow(Xtr)
)
Ytr <- sphere(Xtr)
#working
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
#working
newX <- callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1)
testthat::expect_equal(
nrow(newX), nrow(Xtr)
)
library(CallEshotgun)
#working
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
#working
newX <- callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1)
testthat::expect_equal(
nrow(newX), nrow(Xtr)
)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
#working
newX <- callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1)
