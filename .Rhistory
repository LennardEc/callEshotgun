# t = constant (optional), with default value 1/(8*pi)
#
##########################################################################
x1 <- xx[1]
x2 <- xx[2]
term1 <- a * (x2 - b*x1^2 + c*x1 - r)^2
term2 <- s*(1-t)*cos(x1)
y <- term1 + term2 + s
return(y)
}
#' modifiedBranin
#'
#' @param x vector
#'
#' @return a matrix
#' @export
#'
#' @examples
modifiedBranin <- function(x) {
matrix(apply(x, # matrix
1, # margin (apply over rows)
function(x){
branin(x)
}),
, 1) # number of columns
}
Ytr <- sphere(Xtr)
sphere <- function (x) {
matrix(apply(x, # matrix
1, # margin (apply over rows)
function(x) {
sum(x ^ 2)  # objective function
}),
, 1) # number of columns
}
Ytr <- sphere(Xtr)
View(Xtr)
View(Ytr)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1, -2), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
source('C:/Users/Lennard/IDE/praxisprojekt/rshotgunsmall/R/CallEshotgun.R')
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1, -2), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
library(CallEshotgun)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-4,-5), c(-3,1), 10L, 0.1)
, typeof(Xtr)
)
#wrong dimension
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0, 1), 10L, 0.1)
, NULL
)
#values are not strictly smaller
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(1,1), c(1,1), 10L, 0.1)
, NULL
)
#values are not strictly smaller
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,1), c(2,1), 10L, 0.1)
, NULL
)
#value of lower bound is bigger than the value of the upper bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,3), c(2,2), 10L, 0.1)
, NULL
)
library(CallEshotgun)
source('C:/Users/Lennard/IDE/praxisprojekt/rshotgunsmall/R/CallEshotgun.R')
source('C:/Users/Lennard/IDE/praxisprojekt/rshotgunsmall/R/testFunctions.R')
Xtr <- matrix(runif(20),ncol=3)
Ytr <- modifiedBranin(Xtr)
print(callEshotgun(Xtr, Ytr, c(-5,-4,-3), c(5,6,7), 10L, 2.0))
Xtr <- matrix(runif(20),ncol=3)
Ytr <- modifiedBranin(Xtr)
Xtr <- matrix(runif(20),ncol=3)
Ytr <- modifiedBranin(Xtr)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- modifiedBranin(Xtr)
Xtr <- matrix(runif(20),ncol=3)
Ytr <- modifiedBranin(Xtr)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- modifiedBranin(Xtr)
Xtr <- matrix(runif(20),ncol=1)
Ytr <- modifiedLevy(Xtr)[1:8]
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5), c(5), 10L, 0.1),
NULL
)
Xtr <- matrix(runif(20),ncol=1)
Ytr <- modifiedLevy(Xtr)#[1:8]
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)[1:8]
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1)
library(CallEshotgun)
library(CallEshotgun)
?levy
#' egg
#'
#'
#' @param xx Vector
#'
#' @return y an single
#' @export
#'
#' @examples
egg <- function(xx) {
x1 <- xx[1]
x2 <- xx[2]
term1 <- -(x2+47) * sin(sqrt(abs(x2+x1/2+47)))
term2 <- -x1 * sin(sqrt(abs(x1-(x2+47))))
y <- term1 + term2
return(y)
}
#'# xx = c(x1, x2, x3, x4, x5, x6)
#'#
#'##########################################################################
#'
#' @param x Vector x = c(x1, x2, x3, x4, x5, x6)
#'
#' @return a matrix with the sphere function applied to each row
#' @export
#'
#' @examples
sphere <- function (x) {
matrix(apply(x, # matrix
1, # margin (apply over rows)
function(x) {
sum(x ^ 2)  # objective function
}),
, 1) # number of columns
}
#'#
#'##########################################################################
#'
#'
#' @param xx Vector with two elements xx = c(x1, x2)
#'
#' @return y an single double
#' @export
#'
#' @examples
egg <- function(xx) {
x1 <- xx[1]
x2 <- xx[2]
term1 <- -(x2+47) * sin(sqrt(abs(x2+x1/2+47)))
term2 <- -x1 * sin(sqrt(abs(x1-(x2+47))))
y <- term1 + term2
return(y)
}
devtools::document()
?levy
py_config()
devtools::document()
R --version
version[['version.string']]
sessionInfo()
library(CallEshotgun)
devtools::document()
print(toTitleCase("Providing an interface to the e-shotgun algorithm for bayesian optimization"))
print(tools::toTitleCase("Providing an interface to the e-shotgun algorithm for bayesian optimization"))
library(CallEshotgun)
document::check() --as-cran
devtools::check() --as-cran
ls
getwd()
setwd("C:/Users/Lennard/IDE/praxisprojekt/rshotgunsmall")
setwd("C:/Users/Lennard/IDE/praxisprojekt")
R CMD check --as-cran CallEshotgun_0.1.0.tar.gz
install.packages("testthat")
install.packages("testthat")
library(CallEshotgun)
print(reticulate::virtualenv_list())
print(reticulate::virtualenv_list())
library(CallEshotgun)
library(CallEshotgun)
library(CallEshotgun)
library(CallEshotgun)
library(CallEshotgun)
library(CallEshotgun)
py_config()
py_discover_config()
library(CallEshotgun)
typeof(py_discover_config())
pythonVersionMissing <- tryCatch({
py_discover_config()
}, error = function(x) {
FALSE
})
pythonVersionMissing <- tryCatch({
py_discover_config()
}, error = function(x) {
FALSE
})
print(pythonVersionMissing)
library(CallEshotgun)
library(CallEshotgun)
print(reticulate::virtualenv_exists())
library(CallEshotgun)
py_available()
conda_create("test")
py_available()
py_available()
library(CallEshotgun)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-4,-5), c(-3,1), 10L, 0.1)
, typeof(Xtr)
)
#wrong dimension
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0, 1), 10L, 0.1)
, NULL
)
#wrong dimension
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1, 0), c(5.12, 0, 1), 10L, 0.1)
, NULL
)
#values are not strictly smaller
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(1,1), c(1,1), 10L, 0.1)
, NULL
)
#values are not strictly smaller
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,1), c(2,1), 10L, 0.1)
, NULL
)
#value of lower bound is bigger than the value of the upper bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,3), c(2,2), 10L, 0.1)
, NULL
)
#value of upper bound is lower than the value of the lower bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,0), c(2,-1), 10L, 0.1)
, NULL
)
#value of upper bound is lower than the value of the lower bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,0), c(-3,-1), 10L, 0.1)
, NULL
)
Xtr <- matrix(runif(20),ncol=3)
Ytr <- sphere(Xtr)
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(5,0,200), c(10,10,210), 10L, 0.1)
, typeof(Xtr)
)
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(5,0,200), c(10,10,190), 10L, 0.1)
, NULL
)
use_condaenv("r-reticulate")
py_available()
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-4,-5), c(-3,1), 10L, 0.1)
, typeof(Xtr)
)
#wrong dimension
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0, 1), 10L, 0.1)
, NULL
)
#wrong dimension
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1, 0), c(5.12, 0, 1), 10L, 0.1)
, NULL
)
#values are not strictly smaller
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(1,1), c(1,1), 10L, 0.1)
, NULL
)
#values are not strictly smaller
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,1), c(2,1), 10L, 0.1)
, NULL
)
#value of lower bound is bigger than the value of the upper bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,3), c(2,2), 10L, 0.1)
, NULL
)
#value of upper bound is lower than the value of the lower bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,0), c(2,-1), 10L, 0.1)
, NULL
)
#value of upper bound is lower than the value of the lower bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,0), c(-3,-1), 10L, 0.1)
, NULL
)
Xtr <- matrix(runif(20),ncol=3)
Ytr <- sphere(Xtr)
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(5,0,200), c(10,10,210), 10L, 0.1)
, typeof(Xtr)
)
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(5,0,200), c(10,10,190), 10L, 0.1)
, NULL
)
use_virtualenv("r-reticulate")
py_available()
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-4,-5), c(-3,1), 10L, 0.1)
, typeof(Xtr)
)
#wrong dimension
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0, 1), 10L, 0.1)
, NULL
)
#wrong dimension
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1, 0), c(5.12, 0, 1), 10L, 0.1)
, NULL
)
#values are not strictly smaller
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(1,1), c(1,1), 10L, 0.1)
, NULL
)
#values are not strictly smaller
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,1), c(2,1), 10L, 0.1)
, NULL
)
#value of lower bound is bigger than the value of the upper bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,3), c(2,2), 10L, 0.1)
, NULL
)
#value of upper bound is lower than the value of the lower bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,0), c(2,-1), 10L, 0.1)
, NULL
)
#value of upper bound is lower than the value of the lower bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,0), c(-3,-1), 10L, 0.1)
, NULL
)
Xtr <- matrix(runif(20),ncol=3)
Ytr <- sphere(Xtr)
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(5,0,200), c(10,10,210), 10L, 0.1)
, typeof(Xtr)
)
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(5,0,200), c(10,10,190), 10L, 0.1)
, NULL
)
install_miniconda()
use_virtualenv("r-minidonda")
py_available()
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-4,-5), c(-3,1), 10L, 0.1)
, typeof(Xtr)
)
#wrong dimension
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0, 1), 10L, 0.1)
, NULL
)
#wrong dimension
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(-5.12,-1, 0), c(5.12, 0, 1), 10L, 0.1)
, NULL
)
#values are not strictly smaller
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(1,1), c(1,1), 10L, 0.1)
, NULL
)
#values are not strictly smaller
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,1), c(2,1), 10L, 0.1)
, NULL
)
#value of lower bound is bigger than the value of the upper bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,3), c(2,2), 10L, 0.1)
, NULL
)
#value of upper bound is lower than the value of the lower bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,0), c(2,-1), 10L, 0.1)
, NULL
)
#value of upper bound is lower than the value of the lower bound
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(0,0), c(-3,-1), 10L, 0.1)
, NULL
)
Xtr <- matrix(runif(20),ncol=3)
Ytr <- sphere(Xtr)
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(5,0,200), c(10,10,210), 10L, 0.1)
, typeof(Xtr)
)
testthat::expect_equal(
callEshotgun(Xtr, Ytr, c(5,0,200), c(10,10,190), 10L, 0.1)
, NULL
)
checkLibraries()
python_available()
py_available()
library(reticulate)
py_available()
virtualenv_exists(envname = NULL)
CallEshotgun::checkLibraries()
conda_create('C:/Users/Lennard/AppData/Local/r-miniconda/envs/r-reticulate')
CallEshotgun::checkLibraries()
CallEshotgun::checkLibraries()
CallEshotgun::checkLibraries()
library(CallEshotgun)
CallEshotgun::checkLibraries()
py_install("GPy")
py_install("GPy==1.9.9")
py_install("GPy==1.9.9", pip = TRUE)
py_install("GPy-1.9.9", pip = TRUE)
py_install("GPy==1.9.9", pip = TRUE)
Xtr <- matrix(runif(20),ncol=2)
Ytr <- sphere(Xtr)
# right dimension, legal values
testthat::expect_type(
callEshotgun(Xtr, Ytr, c(-5.12,-1), c(5.12, 0), 10L, 0.1),
typeof(Xtr)
)
library(CallEshotgun)
CallEshotgun::checkLibraries()
py_config()
